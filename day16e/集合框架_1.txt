集合类的由来：
	对象用于封装特有数据，对象多了需要存储，如果对象的个数不确定。
	就使用集合容器进行存储。
	
集合特点：【这个也是集合与数组的区别】
1，用于存储对象的容器。
2，集合的长度是可变的。
3，集合中不可以存储基本数据类型值。 



集合容器因为内部的数据结构不同，有多种具体容器。【比如，杯子也很多种、茶杯】
不断的向上抽取，就形成了集合框架。【部分容器，有共性，向上抽取】

框架的顶层Collection接口：

Collection的常见方法：【import java.util】

1，添加。
	boolean add(Object obj):【添加一个】
	boolean addAll(Collection coll):添加一堆
	

2，删除。
	boolean remove(object obj):
	boolean removeAll(Collection coll);
	void clear();【清空所有】
	
3，判断：
	boolean contains(object obj):
	boolean containsAll(Colllection coll);
	boolean isEmpty():判断集合中是否有元素。 

4，获取：
	int size():
	Iterator iterator():取出元素的方式：迭代器。
	
	该对象必须依赖于具体容器，因为每一个容器的数据结构都不同。
	所以该迭代器对象是在容器中进行内部实现的。
	对于使用容器者而言，具体的实现不重要，只要通过容器获取到该实现的迭代器的对象即可，
	也就是iterator方法。
	
	Iterator接口就是对所有的Collection容器进行元素取出的公共接口。【这样很方便，我不需要知道每个容器内部结构】
	其实就是抓娃娃游戏机中的夹子！
	【一个事物访问另外一个事物内部成员，用内部类 来描述】
	
5，其他：
	boolean retainAll(Collection coll);取交集。
	Object[] toArray():将集合转成数组。 
	

-------------------------------
Collection【下面的 两大派系如下：】  知道每种容器的特点，才知道用那个。
	|--List（列表）：有序(存入和取出的顺序一致),元素都有索引(角标)，元素可以重复。
	|--Set（）：元素不能重复,无序。


List:特有的常见方法：有一个共性特点就是都可以操作角标。
	
1，添加
	void add(index,element);
	void add(index,collection);


2，删除；
	Object remove(index):


3，修改：
	Object set(index,element);
	

4，获取：
	Object get(index);
	int indexOf(object);
	int lastIndexOf(object);
	List subList(from,to);
	
	
list集合是可以完成对元素的增删改查。


List:【list 接口下几个常用的类】
	|--Vector:内部是数组数据结构，是同步的【效率低，现在几乎不用】。增删，查询都很慢！【jdk1.0 的时候只有此一个集合。】
	|--ArrayList:内部是数组数据结构，是不同步的。替代了Vector。查询的速度快【因为，数组空间是连续的】。【多线程，加锁解决，或者用其他方法一般不用vector】
	|--LinkedList:内部是链表数据结构，是不同步的。优点：增删元素的速度很快【内存空间不连续】。【集合，除了Vector是同步的之外，其他 都是非同步的】
	
	
	
	
作业：
1，自己去查文档演示Vector中的elements()方法。

2，LinkedList中的，addFirst addLast getFirst，getLast  removeFirst removeLast。
	
3，既然集合是存储对象的，请定义ArryaList集合，并存储Person对象。如new Person("lisi",20);
并取出。将姓名和年龄打印出来。

